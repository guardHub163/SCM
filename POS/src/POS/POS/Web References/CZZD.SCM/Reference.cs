//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.5456
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 2.0.50727.5456 版自动生成。
// 
#pragma warning disable 1591

namespace POS.CZZD.SCM {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WebServiceSoap", Namespace="http://czzd.scm.webservice")]
    public partial class WebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SetDataInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSystemTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataInfoOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WebService() {
            this.Url = global::POS.Properties.Settings.Default.POS_CZZD_SCM_WebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SetDataInfoCompletedEventHandler SetDataInfoCompleted;
        
        /// <remarks/>
        public event GetSystemTimeCompletedEventHandler GetSystemTimeCompleted;
        
        /// <remarks/>
        public event GetDataInfoCompletedEventHandler GetDataInfoCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://czzd.scm.webservice/SetDataInfo", RequestNamespace="http://czzd.scm.webservice", ResponseNamespace="http://czzd.scm.webservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetDataInfo(string tableName, string xmlData, string webServiceKey) {
            object[] results = this.Invoke("SetDataInfo", new object[] {
                        tableName,
                        xmlData,
                        webServiceKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetDataInfoAsync(string tableName, string xmlData, string webServiceKey) {
            this.SetDataInfoAsync(tableName, xmlData, webServiceKey, null);
        }
        
        /// <remarks/>
        public void SetDataInfoAsync(string tableName, string xmlData, string webServiceKey, object userState) {
            if ((this.SetDataInfoOperationCompleted == null)) {
                this.SetDataInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDataInfoOperationCompleted);
            }
            this.InvokeAsync("SetDataInfo", new object[] {
                        tableName,
                        xmlData,
                        webServiceKey}, this.SetDataInfoOperationCompleted, userState);
        }
        
        private void OnSetDataInfoOperationCompleted(object arg) {
            if ((this.SetDataInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDataInfoCompleted(this, new SetDataInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://czzd.scm.webservice/GetSystemTime", RequestNamespace="http://czzd.scm.webservice", ResponseNamespace="http://czzd.scm.webservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSystemTime() {
            object[] results = this.Invoke("GetSystemTime", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSystemTimeAsync() {
            this.GetSystemTimeAsync(null);
        }
        
        /// <remarks/>
        public void GetSystemTimeAsync(object userState) {
            if ((this.GetSystemTimeOperationCompleted == null)) {
                this.GetSystemTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSystemTimeOperationCompleted);
            }
            this.InvokeAsync("GetSystemTime", new object[0], this.GetSystemTimeOperationCompleted, userState);
        }
        
        private void OnGetSystemTimeOperationCompleted(object arg) {
            if ((this.GetSystemTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSystemTimeCompleted(this, new GetSystemTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://czzd.scm.webservice/GetDataInfo", RequestNamespace="http://czzd.scm.webservice", ResponseNamespace="http://czzd.scm.webservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDataInfo(string departmentCode, string tableName, string dateTime, string webServiceKey) {
            object[] results = this.Invoke("GetDataInfo", new object[] {
                        departmentCode,
                        tableName,
                        dateTime,
                        webServiceKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataInfoAsync(string departmentCode, string tableName, string dateTime, string webServiceKey) {
            this.GetDataInfoAsync(departmentCode, tableName, dateTime, webServiceKey, null);
        }
        
        /// <remarks/>
        public void GetDataInfoAsync(string departmentCode, string tableName, string dateTime, string webServiceKey, object userState) {
            if ((this.GetDataInfoOperationCompleted == null)) {
                this.GetDataInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataInfoOperationCompleted);
            }
            this.InvokeAsync("GetDataInfo", new object[] {
                        departmentCode,
                        tableName,
                        dateTime,
                        webServiceKey}, this.GetDataInfoOperationCompleted, userState);
        }
        
        private void OnGetDataInfoOperationCompleted(object arg) {
            if ((this.GetDataInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataInfoCompleted(this, new GetDataInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void SetDataInfoCompletedEventHandler(object sender, SetDataInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetDataInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetDataInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetSystemTimeCompletedEventHandler(object sender, GetSystemTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSystemTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSystemTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetDataInfoCompletedEventHandler(object sender, GetDataInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591